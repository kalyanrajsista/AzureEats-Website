name: 'Continuous Deployment using Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    env:
        ARM_CLIENT_ID: ${{ secrets.AZURERM_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURERM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURERM_SUBSCRIPTION_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURERM_CLIENT_SECRET }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        terraform_wrapper: true

    - name: Azure Login via CLI
      uses: Azure/login@v1.1
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup terraform
      id: setup
      uses: hashicorp/setup-terraform@v1.1.0
      with:
          terraform_version: 0.12.26

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve

    - name: Get App Service Name
      id: app_service_name
      run: terraform output -no-color app_service_name

    - name: Get Azure Resource Group Name
      id: resource_group_name
      run: terraform output -no-color resource_group_name

    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        inlineScript: |
          RESOURCE_GROUP_NAME=${{ steps.resource_group_name.outputs.stdout }}
          APP_SERVICE_NAME=${{ steps.app_service_name.outputs.stdout }}
          echo $REPOURL
          az webapp deployment source config --branch master --name $APP_SERVICE_NAME --repo-url $REPOURL --resource-group $RESOURCE_GROUP_NAME --manual-integration
